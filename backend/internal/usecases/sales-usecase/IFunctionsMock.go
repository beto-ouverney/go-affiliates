// Code generated by mockery v2.14.0. DO NOT EDIT.

package sales_usecase

import (
	context "context"
	customerror "github.com/beto-ouverney/go-affiliates/backend/internal/customerror"
	entities "github.com/beto-ouverney/go-affiliates/backend/internal/entities"

	mock "github.com/stretchr/testify/mock"

	parser "github.com/beto-ouverney/go-affiliates/backend/internal/pkg/parser"

	sync "sync"
)

// IFunctionsMock is an autogenerated mock type for the IFunctionsMock type
type IFunctionsMock struct {
	mock.Mock
}

// getProducersProductSales provides a mock function with given fields: ctx, u, dEntry, cpAll
func (_m *IFunctionsMock) getProducersProductSales(ctx context.Context, u *salesUseCase, dEntry []parser.DataEntry, cpAll []entities.Producer) (*[]entities.Producer, *[]entities.Product, *[]entities.Sale, *customerror.CustomError) {
	ret := _m.Called(ctx, u, dEntry, cpAll)

	var r0 *[]entities.Producer
	if rf, ok := ret.Get(0).(func(context.Context, *salesUseCase, []parser.DataEntry, []entities.Producer) *[]entities.Producer); ok {
		r0 = rf(ctx, u, dEntry, cpAll)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Producer)
		}
	}

	var r1 *[]entities.Product
	if rf, ok := ret.Get(1).(func(context.Context, *salesUseCase, []parser.DataEntry, []entities.Producer) *[]entities.Product); ok {
		r1 = rf(ctx, u, dEntry, cpAll)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]entities.Product)
		}
	}

	var r2 *[]entities.Sale
	if rf, ok := ret.Get(2).(func(context.Context, *salesUseCase, []parser.DataEntry, []entities.Producer) *[]entities.Sale); ok {
		r2 = rf(ctx, u, dEntry, cpAll)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*[]entities.Sale)
		}
	}

	var r3 *customerror.CustomError
	if rf, ok := ret.Get(3).(func(context.Context, *salesUseCase, []parser.DataEntry, []entities.Producer) *customerror.CustomError); ok {
		r3 = rf(ctx, u, dEntry, cpAll)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*customerror.CustomError)
		}
	}

	return r0, r1, r2, r3
}

// getSalesAffiliates provides a mock function with given fields: ctx, u, dataEntryProducers, allLines, allCP, allP
func (_m *IFunctionsMock) getSalesAffiliates(ctx context.Context, u *salesUseCase, dataEntryProducers []parser.DataEntry, allLines []string, allCP *[]entities.Producer, allP *[]entities.Product) (*[]entities.Sale, *customerror.CustomError) {
	ret := _m.Called(ctx, u, dataEntryProducers, allLines, allCP, allP)

	var r0 *[]entities.Sale
	if rf, ok := ret.Get(0).(func(context.Context, *salesUseCase, []parser.DataEntry, []string, *[]entities.Producer, *[]entities.Product) *[]entities.Sale); ok {
		r0 = rf(ctx, u, dataEntryProducers, allLines, allCP, allP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Sale)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, *salesUseCase, []parser.DataEntry, []string, *[]entities.Producer, *[]entities.Product) *customerror.CustomError); ok {
		r1 = rf(ctx, u, dataEntryProducers, allLines, allCP, allP)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

// writerDBAffiliates provides a mock function with given fields: ctx, u, sales, wg
func (_m *IFunctionsMock) writerDBAffiliates(ctx context.Context, u *salesUseCase, sales []entities.Sale, wg *sync.WaitGroup) *customerror.CustomError {
	ret := _m.Called(ctx, u, sales, wg)

	var r0 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, *salesUseCase, []entities.Sale, *sync.WaitGroup) *customerror.CustomError); ok {
		r0 = rf(ctx, u, sales, wg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerror.CustomError)
		}
	}

	return r0
}

// writerDBProducers provides a mock function with given fields: ctx, u, sales, wg
func (_m *IFunctionsMock) writerDBProducers(ctx context.Context, u *salesUseCase, sales []entities.Sale, wg *sync.WaitGroup) *customerror.CustomError {
	ret := _m.Called(ctx, u, sales, wg)

	var r0 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, *salesUseCase, []entities.Sale, *sync.WaitGroup) *customerror.CustomError); ok {
		r0 = rf(ctx, u, sales, wg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerror.CustomError)
		}
	}

	return r0
}

type mockConstructorTestingTNewIFunctionsMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewIFunctionsMock creates a new instance of IFunctionsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFunctionsMock(t mockConstructorTestingTNewIFunctionsMock) *IFunctionsMock {
	mock := &IFunctionsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
