// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks_product_repository

import (
	context "context"

	customerror "github.com/beto-ouverney/go-affiliates/backend/internal/customerror"
	entities "github.com/beto-ouverney/go-affiliates/backend/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// IProductRepository is an autogenerated mock type for the IProductRepository type
type IProductRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, p
func (_m *IProductRepository) Add(ctx context.Context, p []entities.Product) *customerror.CustomError {
	ret := _m.Called(ctx, p)

	var r0 *customerror.CustomError
	if rf, ok := ret.Get(0).(func(context.Context, []entities.Product) *customerror.CustomError); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerror.CustomError)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *IProductRepository) GetAll(ctx context.Context) (*[]entities.Product, *customerror.CustomError) {
	ret := _m.Called(ctx)

	var r0 *[]entities.Product
	if rf, ok := ret.Get(0).(func(context.Context) *[]entities.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Product)
		}
	}

	var r1 *customerror.CustomError
	if rf, ok := ret.Get(1).(func(context.Context) *customerror.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customerror.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIProductRepository creates a new instance of IProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIProductRepository(t mockConstructorTestingTNewIProductRepository) *IProductRepository {
	mock := &IProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
